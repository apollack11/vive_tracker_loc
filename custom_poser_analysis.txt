Notes about writing a custom Poser

Definitions
-- M_PI: defines pi as a constant
-- SQUARED(x): returns x*x

Structs
-- Point: easier definition of 3 floats
-- TrackedSensor:
-- TrackedObject:
-- RGBValue: provides easy access to unsigned chars for Blue, Green, Red, and Alpha
    -- can say "RGBValue RED = { .Red = 255,.Green = 0,.Blue = 0,.Alpha = 125 }"
-- ToriData:
-- PointsAndAngle: stores information about two points including angle between them, rotation matrix, inverse rotation matrix
    -- instantiated as "pna"

Functions
-- writePoint
-- updateHeader
-- writeAxes
-- drawLineBetweenPoints
-- writePcdHeader
-- writePointCloud
-- markPointWithStar
-- static FLT distance(Point a, Point b): returns the distance between 2 points in 3D space
-- Matrix3x3 GetRotationMatrixForTorus(Point a, Point b)
-- Point RotateAndTranslatePoint(Point p, Matrix3x3 rot, Point newOrigin)




I think we need to define what some of these words are being used for
-- Sensor: I think this is an individual sensor on the tracker itself?
-- Object: I think this is the tracker as a whole?
-- Torus: What is he talking about?
-- Fitness: what???
-- Gradient Descent: what for in this case?

// TORIDATA
typedef struct
{
	FLT down[3];  // populated by the IMU for posing
	//Stuff

#define OLD_ANGLES_BUFF_LEN 3
	FLT oldAngles[SENSORS_PER_OBJECT][2][NUM_LIGHTHOUSES][OLD_ANGLES_BUFF_LEN]; // sensor, sweep axis, lighthouse, instance
	int angleIndex[NUM_LIGHTHOUSES][2]; // index into circular buffer ahead. separate index for each axis.
	int lastAxis[NUM_LIGHTHOUSES];

	Point lastLhPos[NUM_LIGHTHOUSES];
	FLT lastLhRotAxisAngle[NUM_LIGHTHOUSES][4];
} ToriData;


// TRACKEDSENSOR
typedef struct
{
	Point point; // location of the sensor on the tracked object;
	Point normal; // unit vector indicating the normal for the sensor
	double theta; // "horizontal" angular measurement from lighthouse radians
	double phi; // "vertical" angular measurement from lighthouse in radians.
} TrackedSensor;


TRACKEDOBJECT
typedef struct
{
	size_t numSensors;
	TrackedSensor sensor[0];
} TrackedObject;


PROGRAM FLOW
Starts at function defining the Poser, in this case PoserTurveyTori

int PoserTurveyTori( SurviveObject * so, PoserData * poserData)
-- takes in a SurviveObject and PoserData
-- checks what type of poser it sees, in this case we are concerned only about POSERDATA_LIGHT (I think... might also be concerned with POSERDATA_FULL_SCENE)
-- go to "case POSERDATA_LIGHT"
-- casts PoserData into correct form, then verifies we have between 1 and 2 lighthouses
-- calls QuickPose for each lighthouse after a sweep in the horizontal and vertical axes

static void QuickPose( SurviveObject * so, int lh )
-- puts PoserData into ToriData (from SurviveObject)
-- checks to see if we have a position yet (this will be true only after calibration, returns if false)
-- instantiates a TrackedObject
-- iterates over all the possible sensors on the active device grabbing any angles that aren't 0 and storing the norm and location of that sensor into TrackedObject
-- stores the number of sensors that saw something into TrackedObject
-- if there were more than 4 sensors that saw something, call SolveForLighthouse

static Point SolveForLighthouse( FLT posOut[3], FLT quatOut[4], TrackedObject *obj, SurviveObject *so, char doLogOutput, const int lh, const int setLhCalibration)
-- receives TrackedObject and SurviveObject from QuickPose
-- also receives empty pos and quat FLTs and lh number
-- puts PoserData into ToriData (from SurviveObject)
